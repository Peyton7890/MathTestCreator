name: "MathQ's Actions"

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to Perform'
        type: choice
        options:
        - Terraform_apply
        - Terraform_destroy
        - Build_ecr_repo
        - Destroy_ecr_repo

jobs:
  terraform_apply:
    name: "Terraform_apply"
    if: ${{ github.event.inputs.action == 'Terraform_apply' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
      
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Secret variable
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Secret variable
          aws-region: ${{ vars.AWS_REGION }}  # Reference the repository variable

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false
   
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
    
  build_ecr_repo:
    name: "Build_ecr_repo"
    if: ${{ github.event.inputs.action == 'Build_ecr_repo' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Secret variable
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Secret variable
          aws-region: ${{ vars.AWS_REGION }}  # Reference the repository variable

      - name: Create ECR repository
        run: |
          aws ecr describe-repositories --repository-names ${{ vars.ECR_REPO_NAME }} || \
          aws ecr create-repository --repository-name ${{ vars.ECR_REPO_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_NAME }}:latest -f lambda/Dockerfile .

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_NAME }}:latest

  destroy_ecr_repo:
    name: "Destroy_ecr_repo"
    if: ${{ github.event.inputs.action == 'Destroy_ecr_repo' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Secret variable
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Secret variable
          aws-region: ${{ vars.AWS_REGION }}  # Reference the repository variable

      - name: Remove Docker images
        run: |
          docker rmi ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_NAME }}:latest || true
          docker rmi ${{ vars.ECR_REPO_NAME }}:latest || true

      - name: Destroy AWS infrastructure
        run: |
          aws ecr delete-repository --repository-name ${{ vars.ECR_REPO_NAME }} --force

